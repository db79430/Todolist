[{"D:\\react\\todolist-end\\src\\index.tsx":"1","D:\\react\\todolist-end\\src\\features\\TodolistsList\\TodolistsList.tsx":"2","D:\\react\\todolist-end\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","D:\\react\\todolist-end\\src\\components\\EditableSpan\\EditableSpan.tsx":"4","D:\\react\\todolist-end\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","D:\\react\\todolist-end\\src\\app\\App.tsx":"6","D:\\react\\todolist-end\\src\\features\\Login.tsx":"7","D:\\react\\todolist-end\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","D:\\react\\todolist-end\\src\\api\\todolists-api.ts":"9","D:\\react\\todolist-end\\src\\features\\auth-reducer.ts":"10","D:\\react\\todolist-end\\src\\app\\app-reducer.ts":"11"},{"size":749,"mtime":1626364057411,"results":"12","hashOfConfig":"13"},{"size":4023,"mtime":1626372839835,"results":"14","hashOfConfig":"13"},{"size":1092,"mtime":1596716576000,"results":"15","hashOfConfig":"13"},{"size":952,"mtime":1594154724000,"results":"16","hashOfConfig":"13"},{"size":5633,"mtime":1596722126000,"results":"17","hashOfConfig":"13"},{"size":2168,"mtime":1626374216951,"results":"18","hashOfConfig":"13"},{"size":4025,"mtime":1626372839430,"results":"19","hashOfConfig":"13"},{"size":4585,"mtime":1597327450000,"results":"20","hashOfConfig":"13"},{"size":2998,"mtime":1626374172822,"results":"21","hashOfConfig":"13"},{"size":1469,"mtime":1626371367543,"results":"22","hashOfConfig":"13"},{"size":1705,"mtime":1626373989572,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"12fslme",{"filePath":"27","messages":"28","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\todolist-end\\src\\index.tsx",[],["48","49"],"D:\\react\\todolist-end\\src\\features\\TodolistsList\\TodolistsList.tsx",["50","51","52","53","54","55","56","57"],"D:\\react\\todolist-end\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\react\\todolist-end\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react\\todolist-end\\src\\features\\TodolistsList\\tasks-reducer.ts",["58","59"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","D:\\react\\todolist-end\\src\\app\\App.tsx",["60","61","62"],"D:\\react\\todolist-end\\src\\features\\Login.tsx",["63","64","65"],"D:\\react\\todolist-end\\src\\features\\TodolistsList\\todolists-reducer.ts",["66"],"D:\\react\\todolist-end\\src\\api\\todolists-api.ts",[],"D:\\react\\todolist-end\\src\\features\\auth-reducer.ts",["67","68"],"D:\\react\\todolist-end\\src\\app\\app-reducer.ts",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":36,"column":8,"nodeType":"75","endLine":36,"endColumn":10,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":41,"column":8,"nodeType":"75","endLine":41,"endColumn":10,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"77","line":46,"column":8,"nodeType":"75","endLine":46,"endColumn":10,"suggestions":"79"},{"ruleId":"73","severity":1,"message":"77","line":51,"column":8,"nodeType":"75","endLine":51,"endColumn":10,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"77","line":56,"column":8,"nodeType":"75","endLine":56,"endColumn":10,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"77","line":61,"column":8,"nodeType":"75","endLine":61,"endColumn":10,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"77","line":66,"column":8,"nodeType":"75","endLine":66,"endColumn":10,"suggestions":"83"},{"ruleId":"73","severity":1,"message":"77","line":71,"column":8,"nodeType":"75","endLine":71,"endColumn":10,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":5,"column":9,"nodeType":"87","messageId":"88","endLine":5,"endColumn":22},{"ruleId":"89","severity":1,"message":"90","line":13,"column":94,"nodeType":"91","messageId":"92","endLine":13,"endColumn":96},{"ruleId":"85","severity":1,"message":"93","line":4,"column":15,"nodeType":"87","messageId":"88","endLine":4,"endColumn":21},{"ruleId":"73","severity":1,"message":"94","line":25,"column":8,"nodeType":"75","endLine":25,"endColumn":10,"suggestions":"95"},{"ruleId":"96","severity":2,"message":"97","line":29,"column":14,"nodeType":"98","endLine":29,"endColumn":30},{"ruleId":"99","severity":2,"message":"100","line":21,"column":20,"nodeType":"87","endLine":21,"endColumn":29},{"ruleId":"101","severity":1,"message":"102","line":35,"column":13,"nodeType":"103","messageId":"104","endLine":40,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":59,"column":28,"nodeType":"107","endLine":59,"endColumn":45},{"ruleId":"89","severity":1,"message":"90","line":10,"column":45,"nodeType":"91","messageId":"92","endLine":10,"endColumn":47},{"ruleId":"85","severity":1,"message":"108","line":3,"column":18,"nodeType":"87","messageId":"88","endLine":3,"endColumn":27},{"ruleId":"85","severity":1,"message":"109","line":4,"column":9,"nodeType":"87","messageId":"88","endLine":4,"endColumn":30},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["113"],["114"],["115"],["116"],["117"],["118"],["119"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Router' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["120"],"react/jsx-no-undef","'CircularProgress' is not defined.","JSXIdentifier","react-hooks/rules-of-hooks","React Hook \"useFormik\" is called conditionally. React Hooks must be called in the exact same order in every component render.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'LoginType' is defined but never used.","'findAllByDisplayValue' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"123","fix":"125"},{"desc":"123","fix":"126"},{"desc":"123","fix":"127"},{"desc":"123","fix":"128"},{"desc":"123","fix":"129"},{"desc":"123","fix":"130"},{"desc":"123","fix":"131"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"132","text":"133"},"Update the dependencies array to be: [dispatch]",{"range":"134","text":"135"},{"range":"136","text":"135"},{"range":"137","text":"135"},{"range":"138","text":"135"},{"range":"139","text":"135"},{"range":"140","text":"135"},{"range":"141","text":"135"},{"range":"142","text":"135"},[1318,1320],"[demo, dispatch, isLoggedIn]",[1489,1491],"[dispatch]",[1660,1662],[1865,1867],[2078,2080],[2279,2281],[2426,2428],[2605,2607],[924,926]]