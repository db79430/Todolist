[{"D:\\react\\todolist-end\\src\\index.tsx":"1","D:\\react\\todolist-end\\src\\features\\TodolistsList\\TodolistsList.tsx":"2","D:\\react\\todolist-end\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","D:\\react\\todolist-end\\src\\components\\EditableSpan\\EditableSpan.tsx":"4","D:\\react\\todolist-end\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","D:\\react\\todolist-end\\src\\app\\App.tsx":"6","D:\\react\\todolist-end\\src\\features\\Login.tsx":"7","D:\\react\\todolist-end\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","D:\\react\\todolist-end\\src\\api\\todolists-api.ts":"9","D:\\react\\todolist-end\\src\\features\\auth-reducer.ts":"10","D:\\react\\todolist-end\\src\\app\\app-reducer.ts":"11","D:\\react\\todolist-end\\src\\reportWebVitals.ts":"12"},{"size":749,"mtime":1626364057411,"results":"13","hashOfConfig":"14"},{"size":4033,"mtime":1598440810318,"results":"15","hashOfConfig":"16"},{"size":1092,"mtime":1596716576000,"results":"17","hashOfConfig":"14"},{"size":952,"mtime":1594154724000,"results":"18","hashOfConfig":"14"},{"size":5633,"mtime":1596722126000,"results":"19","hashOfConfig":"14"},{"size":2168,"mtime":1626374216951,"results":"20","hashOfConfig":"14"},{"size":4025,"mtime":1626372839430,"results":"21","hashOfConfig":"14"},{"size":4585,"mtime":1597327450000,"results":"22","hashOfConfig":"14"},{"size":2998,"mtime":1626374172822,"results":"23","hashOfConfig":"14"},{"size":1469,"mtime":1626371367543,"results":"24","hashOfConfig":"14"},{"size":1693,"mtime":1626374172772,"results":"25","hashOfConfig":"14"},{"size":425,"mtime":1607869388000,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"12fslme",{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1urriod",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\todolist-end\\src\\index.tsx",[],["56","57"],"D:\\react\\todolist-end\\src\\features\\TodolistsList\\TodolistsList.tsx",["58","59","60","61","62","63","64","65"],"D:\\react\\todolist-end\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\react\\todolist-end\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react\\todolist-end\\src\\features\\TodolistsList\\tasks-reducer.ts",["66","67"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n",["68","69"],"D:\\react\\todolist-end\\src\\app\\App.tsx",["70","71","72"],"D:\\react\\todolist-end\\src\\features\\Login.tsx",["73","74","75"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n   const isLoggedIn= useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n       if (isLoggedIn) {\r\n           return <Redirect to={'/'}/>\r\n       }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password address';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}/>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        /*name='email'*/\r\n                        {...formik.getFieldProps('email')}\r\n                        /*onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                        onBlur={formik.handleBlur}*/\r\n                    />\r\n                    {formik.touched.email && formik.errors.email\r\n                        ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        /*name='password'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.password}\r\n                        onBlur={formik.handleBlur}*/\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password\r\n                        ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            name='rememberMe'\r\n                            onChange={formik.handleChange}\r\n                            checked={formik.values.rememberMe}/>}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\react\\todolist-end\\src\\features\\TodolistsList\\todolists-reducer.ts",["76"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","D:\\react\\todolist-end\\src\\api\\todolists-api.ts",[],"D:\\react\\todolist-end\\src\\features\\auth-reducer.ts",["77","78"],"D:\\react\\todolist-end\\src\\app\\app-reducer.ts",[],"D:\\react\\todolist-end\\src\\reportWebVitals.ts",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":37,"column":8,"nodeType":"85","endLine":37,"endColumn":10,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"87","line":42,"column":8,"nodeType":"85","endLine":42,"endColumn":10,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"87","line":47,"column":8,"nodeType":"85","endLine":47,"endColumn":10,"suggestions":"89"},{"ruleId":"83","severity":1,"message":"87","line":52,"column":8,"nodeType":"85","endLine":52,"endColumn":10,"suggestions":"90"},{"ruleId":"83","severity":1,"message":"87","line":57,"column":8,"nodeType":"85","endLine":57,"endColumn":10,"suggestions":"91"},{"ruleId":"83","severity":1,"message":"87","line":62,"column":8,"nodeType":"85","endLine":62,"endColumn":10,"suggestions":"92"},{"ruleId":"83","severity":1,"message":"87","line":67,"column":8,"nodeType":"85","endLine":67,"endColumn":10,"suggestions":"93"},{"ruleId":"83","severity":1,"message":"87","line":72,"column":8,"nodeType":"85","endLine":72,"endColumn":10,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":5,"column":9,"nodeType":"97","messageId":"98","endLine":5,"endColumn":22},{"ruleId":"99","severity":1,"message":"100","line":13,"column":94,"nodeType":"101","messageId":"102","endLine":13,"endColumn":96},{"ruleId":"79","replacedBy":"103"},{"ruleId":"81","replacedBy":"104"},{"ruleId":"95","severity":1,"message":"105","line":4,"column":15,"nodeType":"97","messageId":"98","endLine":4,"endColumn":21},{"ruleId":"83","severity":1,"message":"106","line":25,"column":8,"nodeType":"85","endLine":25,"endColumn":10,"suggestions":"107"},{"ruleId":"108","severity":2,"message":"109","line":29,"column":14,"nodeType":"110","endLine":29,"endColumn":30},{"ruleId":"111","severity":2,"message":"112","line":21,"column":20,"nodeType":"97","endLine":21,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":35,"column":13,"nodeType":"115","messageId":"116","endLine":40,"endColumn":27},{"ruleId":"117","severity":1,"message":"118","line":59,"column":28,"nodeType":"119","endLine":59,"endColumn":45},{"ruleId":"99","severity":1,"message":"100","line":10,"column":45,"nodeType":"101","messageId":"102","endLine":10,"endColumn":47},{"ruleId":"95","severity":1,"message":"120","line":3,"column":18,"nodeType":"97","messageId":"98","endLine":3,"endColumn":27},{"ruleId":"95","severity":1,"message":"121","line":4,"column":9,"nodeType":"97","messageId":"98","endLine":4,"endColumn":30},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["124"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["125"],["126"],["127"],["128"],["129"],["130"],["131"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["122"],["123"],"'Router' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["132"],"react/jsx-no-undef","'CircularProgress' is not defined.","JSXIdentifier","react-hooks/rules-of-hooks","React Hook \"useFormik\" is called conditionally. React Hooks must be called in the exact same order in every component render.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'LoginType' is defined but never used.","'findAllByDisplayValue' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"135","fix":"137"},{"desc":"135","fix":"138"},{"desc":"135","fix":"139"},{"desc":"135","fix":"140"},{"desc":"135","fix":"141"},{"desc":"135","fix":"142"},{"desc":"135","fix":"143"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"144","text":"145"},"Update the dependencies array to be: [dispatch]",{"range":"146","text":"147"},{"range":"148","text":"147"},{"range":"149","text":"147"},{"range":"150","text":"147"},{"range":"151","text":"147"},{"range":"152","text":"147"},{"range":"153","text":"147"},{"range":"154","text":"147"},[1329,1331],"[demo, dispatch, isLoggedIn]",[1500,1502],"[dispatch]",[1671,1673],[1876,1878],[2089,2091],[2290,2292],[2437,2439],[2616,2618],[924,926]]